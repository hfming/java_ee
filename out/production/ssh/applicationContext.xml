<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--    引入外部配置文件 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!--    配置数据源  -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${prop.driverClassName}"/>
        <property name="url" value="${prop.url}"/>
        <property name="username" value="${prop.username}"/>
        <property name="password" value="${prop.password}"/>
        <property name="initialSize" value="${prop.initialSize}"/>
        <property name="maxActive" value="${prop.maxActive}"/>
    </bean>

    <!-- 配置 C3P0 数据源 -->
<!--    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
<!--        &lt;!&ndash;连接数据库的必备信息&ndash;&gt;-->
<!--        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>-->
<!--        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/eesy"></property>-->
<!--        <property name="user" value="root"></property>-->
<!--        <property name="password" value="1234"></property>-->
<!--    </bean>-->

    <!--    配置 Hibernate 的 sessionFactory 的创建，通过 Spring 提供的 LocalSessionFactoryBean 进行配置-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!-- 配置数据源属性 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置 hibernate h核心配置文件的位置及名称 -->
         <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
        <!-- 使用 hibernateProperties 属相来配置 Hibernate 原生的属性 -->
<!--        <property name="hibernateProperties">-->
<!--            &lt;!&ndash; Hibernate 下列属性也可以配置在 hibernate.cfg.xml 核心配置文件中&ndash;&gt;-->
<!--            <props>-->
<!--                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>-->
<!--                <prop key="hibernate.show_sql">true</prop>-->
<!--                <prop key="hibernate.format_sql">true</prop>-->
<!--                <prop key="hibernate.hbm2ddl.auto">update</prop>-->
<!--                &lt;!&ndash;  session 绑定本地线程 单独使用 Hibernate 时进行配置&ndash;&gt;-->
<!--                &lt;!&ndash; <prop key="hibernate.current_session_context_class">thread</prop>&ndash;&gt;-->
<!--            </props>-->
<!--        </property>-->
        <!-- 配置 hibernate 映射文件的位置及名称, 可以使用通配符 -->
        <property name="mappingLocations" value="classpath:com/hfm/entity/*.hbm.xml"/>
    </bean>

    <!--    配置 spring 声明式事务 -->
    <!-- 1. 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!-- 组件扫描 -->
    <context:component-scan base-package="com.hfm"></context:component-scan>

    <!--开启事务注解-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

    <!-- 2. 配置事务属性, 需要事务管理器 -->
    <!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
    <!--        <tx:attributes>-->
    <!--            <tx:method name="*" propagation="REQUIRED"/>-->
    <!--        </tx:attributes>-->
    <!--    </tx:advice>-->

    <!-- 3. 配置事务切点, 并把切点和事务属性关联起来 -->
    <!--    <aop:config>-->
    <!--        <aop:pointcut expression="execution(* com.hfm.server.*(..))" id="txPointcut"/>-->
    <!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>-->
    <!--    </aop:config>-->

    <!--    注意: 在 IOC 容器中配置 Struts2 的 Action 时, 需要配置 scope 属性, 其值必须为 prototype-->
    <!--    <bean id="testAction" class="com.hfm.action.TestAction" scope="prototype">-->
    <!--    </bean>-->
</beans>