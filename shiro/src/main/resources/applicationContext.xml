<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		                http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		                http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
    <!--    开启组件扫描-->
    <!-- Spring 核心配置文件，用于配置 Spring IOC 容器，用于管理实体类、Dao 层、server 层的bean-->
    <context:component-scan base-package="com.hfm.dao,com.hfm.domain,com.hfm.server">
        <!--        不扫描 Controller 注解-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!--    引入外部配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--   1. 创建数据库连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${prop.driverClassName}"/>
        <property name="jdbcUrl" value="${prop.url}"/>
        <property name="user" value="${prop.username}"/>
        <property name="password" value="${prop.password}"/>
    </bean>

    <!--   2. 创建 EntityManangerfactory 对象交给 spring 容器管理-->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!--        会扫描配置了 jpa 注解的类(实体类)-->
        <property name="packagesToScan" value="com.hfm.domain"></property>
        <!--        配置jpa 的实现方式-->
        <property name="persistenceProvider">
            <bean class="org.hibernate.jpa.HibernatePersistenceProvider">
            </bean>
        </property>
        <!--        jpa 供应商适配器-->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <!--                配置是否自动创建表-->
                <property name="generateDdl" value="true"/>
                <!--                指定数据库类型-->
                <property name="database" value="MYSQL"/>
                <!--                配置数据库方言-->
                <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect"/>
                <!--                配置是否显示sql-->
                <property name="showSql" value="true"/>
            </bean>
        </property>
        <!--        配置 jpa 方言-->
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>

        <!--        注入 jpa 配置信息-->
        <!--        jpa 的基本配置信息与 jpa 实现方式的配置信息-->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!--                二级缓存相关-->
                <!--                <prop key="hibernate.cache.use_second_level_cache">true</prop>-->
                <!--                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>-->
                <!--                <prop key="hibernate.cache.use_query_cache">true</prop>-->
            </props>
        </property>

        <!--        二级缓存-->
        <!--        <property name="sharedCacheMode" value="ENABLE_SELECTIVE"></property>-->
    </bean>

    <!--    3.配置事务管理器-->
    <!-- JPA事务管理器  -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!--    配置支持注解的事务-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

    <!--    4.整合 Spring data Jpa -->
    <!--    base-package 扫描 Repository bean 所在的包-->
    <jpa:repositories base-package="com.hfm.dao"
                      transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="entityManagerFactory">
    </jpa:repositories>

    <!--    1. 配置 SecurityManager!-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--        <property name="cacheManager" ref="cacheManager"/>-->
        <property name="authenticator" ref="authenticator"/>
        <property name="realms">
            <list>
                <ref bean="secondRealm"/>
                <ref bean="jdbcRealm"/>
                <ref bean="webRealm"/>
            </list>
        </property>
        <!--        <property name="rememberMeManager.cookie.maxAge" value="10"/>-->
    </bean>

    <!--    2. 配置 CacheManager.需要加入 ehcache 的 jar 包及配置文件.-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.: -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <bean id="authenticator"
          class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

    <!--    3. 配置 Realm 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean-->
    <bean id="jdbcRealm" class="com.hfm.realms.MyRealms">
        <!--        <property name="credentialsMatcher">-->
        <!--            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
        <!--                <property name="hashAlgorithmName" value="MD5"></property>-->
        <!--                <property name="hashIterations" value="1024"></property>-->
        <!--            </bean>-->
        <!--        </property>-->
    </bean>

    <bean id="secondRealm" class="com.hfm.realms.MyRealms">
        <!--        <property name="credentialsMatcher">-->
        <!--            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
        <!--                <property name="hashAlgorithmName" value="SHA1"></property>-->
        <!--                <property name="hashIterations" value="1024"></property>-->
        <!--            </bean>-->
        <!--        </property>-->
    </bean>

    <bean id="webRealm" class="com.hfm.realms.WebRealms">
        <!--       替换当前 Realm 的 credentialsMatcher 属性，直接使用 HashedCredentialsMatcher 对象, 并设置加密算法 -->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!--                设置加密算法-->
                <property name="hashAlgorithmName" value="MD5"/>
                <!--                设置加密次数-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>

    <!--    4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. -->
    <!--     保证实现了Shiro内部lifecycle函数的bean执行-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--    6. 配置 ShiroFilter. id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.-->
    <!--    若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
<!--        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>-->
        <!--
        	配置哪些页面需要受保护，以及访问这些页面需要的权限.
        	1). anon 可以被匿名访问
        	2). authc 必须认证(即登录)后才可能访问的页面.
        	3). logout 登出.
        	4). roles 角色过滤器
        -->
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /shiro/login = anon
                <!--                /shiro/login = anon-->
                <!--                /shiro/logout = logout-->
                <!--                /user.jsp = roles[user]-->
                <!--                /admin.jsp = roles[admin]-->
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
    </bean>

    <!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式 -->
    <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder"
          factory-method="buildFilterChainDefinitionMap"/>
    <bean id="filterChainDefinitionMapBuilder" class="com.hfm.factory.FilterChainDefinitionMapBuilder"/>
</beans>