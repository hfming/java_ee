<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--    配置 Spring 启动 IOC 容器的 Linster -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--    配置 SpringMVC的核心控制器(前端控制器)-->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--配置初始化参数，用于读取SpringMVC的配置文件,按照配置文件创建 IOC 容器-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--配置servlet的对象的创建时间点：应用加载时创建。 取值只能是非0正整数，表示启动顺序-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--    配置简解决中文乱码的过滤器，建议将字符编码配置在最前面-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--        配置初始化参数，字符编码设置-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 启动过滤器 -->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <!--        过滤所有请求-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--    配置 HiddentHttpMethodFilter 过滤器,用于实现 Restful 风格-->
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Shiro Filter is defined in the spring application context: -->
    <!-- 1. 配置  Shiro 的 shiroFilter.  -->
    <!-- 2. DelegatingFilterProxy 实际上是 Filter 的一个代理对象. 默认情况下, Spring 会到 IOC 容器中查找和 <filter-name> 对应的 filter bean. 也可以通过 targetBeanName 的初始化参数来配置 filter bean 的 id. -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!--    &lt;!&ndash;log4j文件配置&ndash;&gt;-->
<!--    <context-param>-->
<!--        <param-name>log4jConfiguration</param-name>-->
<!--        &lt;!&ndash;默认是classpath下的log4j2.xml&ndash;&gt;-->
<!--        <param-value>classpath:log4j2.xml</param-value>-->
<!--    </context-param>-->
<!--    &lt;!&ndash;log4j的监听器要放在Spring监听器前面&ndash;&gt;-->
<!--    <listener>-->
<!--        <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>-->
<!--    </listener>-->
</web-app>